paths:
  /checklists:
    post:
      tags:
        - checklists
      summary: Create a new instance of the model and persist it into the data source.
      operationId: checklists.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/checklists'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/checklists'
      deprecated: false
    put:
      tags:
        - checklists
      summary: >-
        Update an existing model instance or insert a new one into the data
        source.
      operationId: checklists.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/checklists'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/checklists'
      deprecated: false
    get:
      tags:
        - checklists
      summary: Find all instances of the model matched by filter from the data source.
      operationId: checklists.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/checklists'
      deprecated: false
  '/checklists/{id}/exists':
    get:
      tags:
        - checklists
      summary: Check whether a model instance exists in the data source.
      operationId: 'checklists.exists__get_checklists_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/checklists/{id}':
    head:
      tags:
        - checklists
      summary: Check whether a model instance exists in the data source.
      operationId: 'checklists.exists__head_checklists_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - checklists
      summary: Find a model instance by id from the data source.
      operationId: checklists.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/checklists'
      deprecated: false
    delete:
      tags:
        - checklists
      summary: Delete a model instance by id from the data source.
      operationId: checklists.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - checklists
      summary: >-
        Update attributes for a model instance and persist it into the data
        source.
      operationId: checklists.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/checklists'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/checklists'
      deprecated: false
  /checklists/findOne:
    get:
      tags:
        - checklists
      summary: Find first instance of the model matched by filter from the data source.
      operationId: checklists.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/checklists'
      deprecated: false
  /checklists/update:
    post:
      tags:
        - checklists
      summary: Update instances of the model matched by where from the data source.
      operationId: checklists.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/checklists'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /checklists/count:
    get:
      tags:
        - checklists
      summary: Count instances of the model matched by where from the data source.
      operationId: checklists.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /inspections:
    post:
      tags:
        - inspections
      summary: Create a new instance of the model and persist it into the data source.
      operationId: inspections.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/inspections'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/inspections'
      deprecated: false
    put:
      tags:
        - inspections
      summary: >-
        Update an existing model instance or insert a new one into the data
        source.
      operationId: inspections.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/inspections'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/inspections'
      deprecated: false
    get:
      tags:
        - inspections
      summary: Find all instances of the model matched by filter from the data source.
      operationId: inspections.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/inspections'
      deprecated: false
  '/inspections/{id}/exists':
    get:
      tags:
        - inspections
      summary: Check whether a model instance exists in the data source.
      operationId: 'inspections.exists__get_inspections_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/inspections/{id}':
    head:
      tags:
        - inspections
      summary: Check whether a model instance exists in the data source.
      operationId: 'inspections.exists__head_inspections_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - inspections
      summary: Find a model instance by id from the data source.
      operationId: inspections.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/inspections'
      deprecated: false
    delete:
      tags:
        - inspections
      summary: Delete a model instance by id from the data source.
      operationId: inspections.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - inspections
      summary: >-
        Update attributes for a model instance and persist it into the data
        source.
      operationId: inspections.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/inspections'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/inspections'
      deprecated: false
  /inspections/findOne:
    get:
      tags:
        - inspections
      summary: Find first instance of the model matched by filter from the data source.
      operationId: inspections.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/inspections'
      deprecated: false
  /inspections/update:
    post:
      tags:
        - inspections
      summary: Update instances of the model matched by where from the data source.
      operationId: inspections.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/inspections'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /inspections/count:
    get:
      tags:
        - inspections
      summary: Count instances of the model matched by where from the data source.
      operationId: inspections.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /inspectors:
    post:
      tags:
        - inspectors
      summary: Create a new instance of the model and persist it into the data source.
      operationId: inspectors.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/inspectors'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/inspectors'
      deprecated: false
    put:
      tags:
        - inspectors
      summary: >-
        Update an existing model instance or insert a new one into the data
        source.
      operationId: inspectors.upsert
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            $ref: '#/definitions/inspectors'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/inspectors'
      deprecated: false
    get:
      tags:
        - inspectors
      summary: Find all instances of the model matched by filter from the data source.
      operationId: inspectors.find
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/inspectors'
      deprecated: false
  '/inspectors/{id}/exists':
    get:
      tags:
        - inspectors
      summary: Check whether a model instance exists in the data source.
      operationId: 'inspectors.exists__get_inspectors_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/inspectors/{id}':
    head:
      tags:
        - inspectors
      summary: Check whether a model instance exists in the data source.
      operationId: 'inspectors.exists__head_inspectors_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - inspectors
      summary: Find a model instance by id from the data source.
      operationId: inspectors.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: Filter defining fields and include
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/inspectors'
      deprecated: false
    delete:
      tags:
        - inspectors
      summary: Delete a model instance by id from the data source.
      operationId: inspectors.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    put:
      tags:
        - inspectors
      summary: >-
        Update attributes for a model instance and persist it into the data
        source.
      operationId: inspectors.prototype.updateAttributes
      parameters:
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/inspectors'
        - name: id
          in: path
          description: PersistedModel id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/inspectors'
      deprecated: false
  /inspectors/findOne:
    get:
      tags:
        - inspectors
      summary: Find first instance of the model matched by filter from the data source.
      operationId: inspectors.findOne
      parameters:
        - name: filter
          in: query
          description: 'Filter defining fields, where, include, order, offset, and limit'
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/inspectors'
      deprecated: false
  /inspectors/update:
    post:
      tags:
        - inspectors
      summary: Update instances of the model matched by where from the data source.
      operationId: inspectors.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            $ref: '#/definitions/inspectors'
      responses:
        '200':
          description: Request was successful
          schema:
            description: The number of instances updated
            type: object
      deprecated: false
  /inspectors/count:
    get:
      tags:
        - inspectors
      summary: Count instances of the model matched by where from the data source.
      operationId: inspectors.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
definitions:
  checklists:
    properties:
      _id:
        description: Built-in id
        type: string
      id:
        description: User-driven id
        type: string
      description:
        description: Description of checklist item
        type: string
      details:
        description: Full details of inspection item
        type: string
      requiresReinspection:
        description: Whether a violation will require reinspection
        type: boolean
    required:
      - _id
    additionalProperties: false
  x-any:
    properties: {}
  inspections:
    properties:
      _id:
        description: Built-in id
        type: string
      contactName:
        description: Primary contact for the location venue
        type: string
      contactPhone:
        description: Primary contact phone number
        type: string
      duration:
        description: 'Duration of the inspection, in seconds'
        type: number
        format: double
      id:
        description: Accessible id
        type: string
      incidents:
        description: Array of incidents discovered during inspection
        type: array
        items:
          type: object
      inspector:
        description: id of the inspector assigned
        type: string
      location:
        description: Address to be inspected
        type: string
      name:
        description: Venue name
        type: string
      reason:
        description: Reason for the inspection
        type: string
      startTime:
        description: Timestamp string for start time
        type: string
      status:
        description: The inspection status
        type: string
      _rev:
        description: The revision number of the document version
        type: string
    required:
      - _id
    additionalProperties: false
  inspectors:
    properties:
      _id:
        description: Built-in id
        type: string
      icon:
        description: The URL for the icon representing this inspector
        type: string
      id:
        description: User-generated id
        type: string
      inspectionsCompleted:
        description: The number of inspections completed
        type: number
        format: double
      inspectionsRemaining:
        description: The number of inspections remaining
        type: number
        format: double
      location:
        description: The current location of the inspector
        type: string
      name:
        description: The name of the inspector
        type: string
    required:
      - _id
    additionalProperties: false
swagger: '2.0'
info:
  x-ibm-name: inspector
  version: 1.0.0
  title: inspector
schemes:
  - https
host: $(catalog.host)
basePath: /api
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  clientIdHeader:
    type: apiKey
    in: header
    name: X-IBM-Client-Id
  clientSecretHeader:
    in: header
    name: X-IBM-Client-Secret
    type: apiKey
security:
  - clientIdHeader: []
    clientSecretHeader: []
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  catalogs:
    apic-dev:
      properties:
        runtime-url: $(TARGET_URL)
    sb:
      properties:
        runtime-url: 'http://localhost:4001'
  assembly:
    execute:
      - invoke:
          target-url: $(runtime-url)$(request.path)$(request.search)
